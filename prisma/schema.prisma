// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_MYSQL")
}

model Person {
  id                            Int       @id @default(autoincrement())
  id_imobzi                     String    @unique
  cpf                           String    @unique @db.VarChar(255)
  fullname                      String?
  birthdate                     DateTime?
  email                         String    @db.VarChar(255)
  phone                         String    @db.VarChar(255)
  alternative_address           String?
  alternative_address_reference String?
  gender                        String?
  marital_status                String?
  code_imobzi                   String?   @unique
  profession                    String?
  children                      Int?
  pets                          Int?
  kind_of_pet                   String?
  anual_revenue                 Decimal?
  created_at                    DateTime  @default(now())
  updated_at                    DateTime  @updatedAt

  organizations       Organization[]
  owners              Owner[]
  leasesGuarantor     Lease[]        @relation("personGrarantorToLease")
  beneficiariesPerson Beneficiary[]  @relation("personToBeneficiary")
  leaseTenant         Lease[]        @relation("personTenant")

  @@map("people")
}

model Organization {
  id Int @id @default(autoincrement())
  id_imobzi                     String    @unique

  person_id_representative Int
  people                   Person @relation(fields: [person_id_representative], references: [id], onDelete: Cascade)

  name String
  cnpj String @unique

  representative_type String
  phone               String
  email               String
  address             String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  beneficiariesOrganization Beneficiary[] @relation("organizationToBeneficiary")
  tenantLeaseOrganization   Lease[]       @relation("organizationTenant")
  owners                    Owner[]

  @@map("organizations")
}

model Building {
  id         Int        @id @unique
  name       String     @unique
  address    String
  city       String
  zipcode    String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  properties Property[]

  @@map("buildings")
}

model Property {
  id     Int     @id @default(autoincrement())
  unit   String
  type   String
  active Boolean
  status String

  building_id Int
  building    Building @relation(fields: [building_id], references: [id], onDelete: Cascade)

  area             Decimal?
  bedroom          Int?
  suite            Int?
  garage           Int?
  rental_value     Decimal?
  sale_value       Decimal?
  alternative_code String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  owners           Owner[]
  leasesProperty   Lease[]  @relation("propertyToLease")

  @@map("properties")
}

model Owner {
  id Int @id @default(autoincrement())

  id_property Int
  property    Property @relation(fields: [id_property], references: [id], onDelete: Cascade)

  id_owner_person Int?
  person          Person? @relation(fields: [id_owner_person], references: [id], onDelete: Cascade)

  id_owner_organization Int?
  owner_organization    Organization? @relation(fields: [id_owner_organization], references: [id], onDelete: Cascade)

  share      Decimal
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("owners")
}

model Lease {
  id          Int     @id @default(autoincrement())
  id_imobzi                     String    @unique
  status      String
  code_imobzi String?
  start_at    String
  duration    Int

  property_id Int
  property    Property @relation("propertyToLease", fields: [property_id], references: [id], onDelete: Cascade)

  id_tenant_person Int?
  tenant_person    Person? @relation("personTenant", fields: [id_tenant_person], references: [id], onDelete: Cascade)

  id_tenant_organization Int?
  tenant_org             Organization? @relation("organizationTenant", fields: [id_tenant_organization], references: [id], onDelete: Cascade)

  main_guarantor Int?
  guarantor      Person? @relation("personGrarantorToLease", fields: [main_guarantor], references: [id], onDelete: Cascade)

  fee                 Decimal
  guarantee_type      String
  guarantee_value     Decimal?
  annual_readjustment String?
  irrf                Boolean
  include_in_dimob    Boolean
  indeterminate       Boolean
  lease_value         Decimal
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  beneficiariesLease Beneficiary[] @relation("leaseToBeneficiary")
  invoicesLease      Invoice[]     @relation("leaseToInvoice")
  leasesItems        LeaseItem[]   @relation("leaseToLeaseItem")

  @@map("leases")
}

model LeaseItem {
  id                  Int     @id @default(autoincrement())
  due_date            String
  description         String
  management_fee      Boolean
  recurrent           Boolean
  repeat_total        Int?
  value               Decimal
  until_due_date      Boolean
  behavior            String
  autopay_on_due_date Boolean
  repeat_index        Int
  include_in_dimob    Boolean
  start_date          String

  lease_id Int
  leases   Lease @relation("leaseToLeaseItem", fields: [lease_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("lease_items")
}

model Invoice {
  id        String  @id
  status    String
  reference String?
  due_date  String

  lease_id Int
  lease    Lease @relation("leaseToInvoice", fields: [lease_id], references: [id], onDelete: Cascade)

  management_fee  Decimal
  invoice_url     String
  barcode         String?
  bank_slip_url   String?
  bank_slip_id    String?
  total_value     Decimal
  interest_value  Decimal
  paid_at         String?
  credit_at       String?
  paid_manual     Boolean?
  bank_fee_value  Decimal?
  account_credit  String?
  onlending_value Decimal?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  invoiceItems InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id String @id

  invoice_id String
  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  description      String
  behavior         String
  include_in_dimob Boolean
  management_fee   Boolean
  value            Decimal
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("invoices_items")
}

model Beneficiary {
  id Int @id @default(autoincrement())

  id_lease Int
  lease    Lease @relation("leaseToBeneficiary", fields: [id_lease], references: [id], onDelete: Cascade)

  id_beneficiary_person Int?
  beneficiary_person    Person? @relation("personToBeneficiary", fields: [id_beneficiary_person], references: [id], onDelete: Cascade)

  id_beneficiary_organization Int?
  beneficiary_organization    Organization? @relation("organizationToBeneficiary", fields: [id_beneficiary_organization], references: [id], onDelete: Cascade)

  share      Decimal
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("beneficiaries")
}

model Update {
  id            Int      @id @default(autoincrement())
  updated_table String
  details       String?
  created_at    DateTime @default(now())

  @@map("updated_tables")
}
